<BECanvas Width="320" Height="320" @ref="_canvasReference"></BECanvas>

<p>Render preprocessing time: @preprocessTime ms</p>
<p>Render time: @renderTime ms &nbsp;&nbsp; Update time: @updateTime ms</p>
<p>Min:@metrics[0] ms Max:@metrics[metrics.Count - 1] ms Median:@metrics[metrics.Count / 2] ms</p>

<button class="btn-primary" @onclick=SwitchGeometry>Switch Geomerty</button>
<button class="btn-primary" @onclick=RunBenchmark>Run List Benchmark</button>
<p>Benchmark time: @benchmarkTime ms</p>

@code {
    [Parameter]
    public int Fps { get; set; }

    private long preprocessTime = 0;
    private long updateTime = 0;
    private long renderTime = 0;
    private long benchmarkTime = 0;

    private Blazor.Extensions.Canvas.WebGL.WebGLContext gl = null;
    private BECanvasComponent? _canvasReference;
    private WebGLBuffer vertexBuffer;
    private WebGLBuffer colorBuffer;
    private WebGLBuffer indexBuffer;
    private WebGLProgram shaderProgram;
    private WebGLUniformLocation projectionLocation;
    private WebGLUniformLocation viewLocation;
    private WebGLUniformLocation transformLocation;

    private float[] projectionMatrix;
    private float[] viewMatrix;
    private float[] transformMatrix;
    private Geometry geometry;
    private int currentGeometry = 0;
    private bool invalidateRender;

    private Timer timer;
    private List<long> metrics;
    private int floatingIndex = 0;
    private System.Diagnostics.Stopwatch swRender;
    private System.Diagnostics.Stopwatch swUpdate;

    protected override async Task OnInitializedAsync()
    {
        metrics = new List<long>(Fps * 2);
        for (int i = 0; i < Fps * 2; i++) {
            metrics.Add(long.MaxValue);
        }
        swUpdate = new System.Diagnostics.Stopwatch();
        swRender = new System.Diagnostics.Stopwatch();
        timer = new Timer(new TimerCallback(_ => {
            swUpdate.Restart();
            metrics.Sort();
            RotateZ(ref transformMatrix, 0.2f / (float)Fps);
            RotateY(ref transformMatrix, 0.5f / (float)Fps);
            RotateX(ref transformMatrix, 0.3f / (float)Fps);
            InvokeAsync(StateHasChanged);
            updateTime = swUpdate.ElapsedMilliseconds;
        }), null, 0, 1000 / Fps);
        projectionMatrix = CreateProjectionMatrix(40f, 1f, 1f, 100f);
        viewMatrix = CreateIdentityMatrix();
        transformMatrix = CreateIdentityMatrix();
        SwitchGeometry();
    }

    private async Task PrepareRender()
    {
        gl = await this._canvasReference.CreateWebGLAsync();
        // Shaders
        var vertCode = @"
        attribute vec3 position;
        attribute vec3 color;
        varying vec3 vertexColor;
        uniform mat4 projection;
        uniform mat4 view;
        uniform mat4 transform;
        void main(void) {
            vertexColor = color;
            gl_Position = projection * view * transform * vec4(position, 1.0);
        }";
        var vertShader = await gl.CreateShaderAsync(ShaderType.VERTEX_SHADER);
        await gl.ShaderSourceAsync(vertShader, vertCode);
        await gl.CompileShaderAsync(vertShader);
        if (!(await gl.GetShaderParameterAsync<bool>(vertShader, ShaderParameter.COMPILE_STATUS))) {
            System.Console.WriteLine("Unable to compile vertex shader: " + (await gl.GetShaderInfoLogAsync(vertShader)));
        }
        var fragCode = @"
            precision mediump float;
            varying vec3 vertexColor;
            void main(void) {
                gl_FragColor = vec4(vertexColor, 1.0);
            }
        ";
        var fragShader = await gl.CreateShaderAsync(ShaderType.FRAGMENT_SHADER);
        await gl.ShaderSourceAsync(fragShader, fragCode);
        await gl.CompileShaderAsync(fragShader);
        if (!(await gl.GetShaderParameterAsync<bool>(fragShader, ShaderParameter.COMPILE_STATUS))) {
            System.Console.WriteLine("Unable to compile fragment shader: " + (await gl.GetShaderInfoLogAsync(fragShader)));
        }
        shaderProgram = await gl.CreateProgramAsync();
        await gl.AttachShaderAsync(shaderProgram, vertShader);
        await gl.AttachShaderAsync(shaderProgram, fragShader);
        await gl.LinkProgramAsync(shaderProgram);
        if (!(await gl.GetProgramParameterAsync<bool>(shaderProgram, ProgramParameter.LINK_STATUS))) {
            System.Console.WriteLine("Unable to initialize the shader program: " + (await gl.GetProgramInfoLogAsync(shaderProgram)));
        }
        // Buffers
        vertexBuffer = await gl.CreateBufferAsync();
        colorBuffer = await gl.CreateBufferAsync();
        indexBuffer = await gl.CreateBufferAsync();
        await FillBuffers();
        await SetupShader();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (gl == null || invalidateRender) {
            swRender.Restart();
            await PrepareRender();
            swRender.Stop();
            preprocessTime = swRender.ElapsedMilliseconds;
            invalidateRender = false;
        }
        swRender.Restart();
        // Clear
        await gl.BeginBatchAsync();
        await gl.EnableAsync(EnableCap.DEPTH_TEST);
        await gl.DepthFuncAsync(CompareFunction.LEQUAL);
        await gl.ClearColorAsync(0.5f, 0.5f, 0.5f, 0.9f);
        await gl.ClearDepthAsync(1.0f);
        await gl.ViewportAsync(0, 0, (int)this._canvasReference.Width, (int)this._canvasReference.Height);
        await gl.ClearAsync(BufferBits.COLOR_BUFFER_BIT | BufferBits.DEPTH_BUFFER_BIT);
        // Draw
        await gl.UniformMatrixAsync(projectionLocation, false, projectionMatrix);
        await gl.UniformMatrixAsync(viewLocation, false, viewMatrix);
        await gl.UniformMatrixAsync(transformLocation, false, transformMatrix);
        await gl.BindBufferAsync(BufferType.ELEMENT_ARRAY_BUFFER, indexBuffer);
        await gl.DrawElementsAsync(Primitive.TRIANGLES, geometry.Index.Length, DataType.UNSIGNED_SHORT, 0);
        await gl.BindBufferAsync(BufferType.ARRAY_BUFFER, null);
        await gl.BindBufferAsync(BufferType.ELEMENT_ARRAY_BUFFER, null);
        await gl.EndBatchAsync();
        // Measure performance
        swRender.Stop();
        renderTime = swRender.ElapsedMilliseconds;
        metrics[floatingIndex] = renderTime;
        floatingIndex = (floatingIndex + 1) % metrics.Count;
    }

    private async Task FillBuffers()
    {
        await gl.BindBufferAsync(BufferType.ARRAY_BUFFER, vertexBuffer);
        await gl.BufferDataAsync(BufferType.ARRAY_BUFFER, geometry.Vertex, BufferUsageHint.STATIC_DRAW);
        await gl.BindBufferAsync(BufferType.ARRAY_BUFFER, colorBuffer);
        await gl.BufferDataAsync(BufferType.ARRAY_BUFFER, geometry.Color, BufferUsageHint.STATIC_DRAW);
        await gl.BindBufferAsync(BufferType.ARRAY_BUFFER, null);
        await gl.BindBufferAsync(BufferType.ELEMENT_ARRAY_BUFFER, indexBuffer);
        await gl.BufferDataAsync(BufferType.ELEMENT_ARRAY_BUFFER, geometry.Index, BufferUsageHint.STATIC_DRAW);
        await gl.BindBufferAsync(BufferType.ELEMENT_ARRAY_BUFFER, null);
    }

    private async Task SetupShader()
    {
        // Position
        await gl.BindBufferAsync(BufferType.ARRAY_BUFFER, vertexBuffer);
        var position = (uint)await gl.GetAttribLocationAsync(shaderProgram, "position");
        await gl.VertexAttribPointerAsync(position, 3, DataType.FLOAT, false, 0, 0);
        await gl.EnableVertexAttribArrayAsync(position);
        // Color
        await gl.BindBufferAsync(BufferType.ARRAY_BUFFER, colorBuffer);
        var color = (uint)await gl.GetAttribLocationAsync(shaderProgram, "color");
        await gl.VertexAttribPointerAsync(color, 3, DataType.FLOAT, false, 0, 0);
        await gl.EnableVertexAttribArrayAsync(color);
        // Uniforms
        projectionLocation = await gl.GetUniformLocationAsync(shaderProgram, "projection");
        viewLocation = await gl.GetUniformLocationAsync(shaderProgram, "view");
        transformLocation = await gl.GetUniformLocationAsync(shaderProgram, "transform");
        await gl.UseProgramAsync(shaderProgram);
    }

    private float[] CreateProjectionMatrix(float angle, float ratio, float min, float max)
    {
        angle = (float)Math.Tan(angle * Math.PI / 360f);
        return new float[]
        {
            0.5f / angle, 0f, 0f, 0f,
            0f, 0.5f * ratio / angle, 0f, 0f,
            0f, 0f, -(max - min) / (max - min), -1f,
            0f, 0f, -2f * max * min / (max - min), 0f,
        };
    }

    private float[] CreateIdentityMatrix()
    {
        return new float[]
        {
            1f, 0f, 0f, 0f,
            0f, 1f, 0f, 0f,
            0f, 0f, 1f, 0f,
            0f, 0f, 0f, 1f,
        };
    }

    private void RotateX(ref float[] matrix, float pitch)
    {
        float c = (float)Math.Cos(pitch);
        float s = (float)Math.Sin(pitch);
        float mv1 = matrix[1];
        float mv5 = matrix[5];
        float mv9 = matrix[9];
        matrix[1] = c * matrix[1] - s * matrix[2];
        matrix[5] = c * matrix[5] - s * matrix[6];
        matrix[9] = c * matrix[9] - s * matrix[10];
        matrix[2] = c * matrix[2] + s * mv1;
        matrix[6] = c * matrix[6] + s * mv5;
        matrix[10] = c * matrix[10] + s * mv9;
    }

    private void RotateY(ref float[] matrix, float yaw)
    {
        float c = (float)Math.Cos(yaw);
        float s = (float)Math.Sin(yaw);
        float mv0 = matrix[0];
        float mv4 = matrix[4];
        float mv8 = matrix[8];
        matrix[0] = c * matrix[0] + s * matrix[2];
        matrix[4] = c * matrix[4] + s * matrix[6];
        matrix[8] = c * matrix[8] + s * matrix[10];
        matrix[2] = c * matrix[2] - s * mv0;
        matrix[6] = c * matrix[6] - s * mv4;
        matrix[10] = c * matrix[10] - s * mv8;
    }

    private void RotateZ(ref float[] matrix, float roll)
    {
        float c = (float)Math.Cos(roll);
        float s = (float)Math.Sin(roll);
        float mv0 = matrix[0];
        float mv4 = matrix[4];
        float mv8 = matrix[8];
        matrix[0] = c * matrix[0] - s * matrix[1];
        matrix[4] = c * matrix[4] - s * matrix[5];
        matrix[8] = c * matrix[8] - s * matrix[9];
        matrix[1] = c * matrix[1] + s * mv0;
        matrix[5] = c * matrix[5] + s * mv4;
        matrix[9] = c * matrix[9] + s * mv8;
    }

    private void SwitchGeometry()
    {
        currentGeometry = (currentGeometry + 1) % (int)GeometryType.COUNT;
        geometry = Geometry.Create((GeometryType)currentGeometry);
        viewMatrix[14] = geometry.Zoom;
        invalidateRender = true;
    }

    private void RunBenchmark()
    {
        var sw = new System.Diagnostics.Stopwatch();
        sw.Start();
        var list = new List<int>();
        for (int i = 0; i < 1000000; i++) {
            list.Add(i);
        }
        sw.Stop();
        benchmarkTime = sw.ElapsedMilliseconds;
    }

    private enum GeometryType
    {
        TRIANGLE,
        CUBE,
        COUNT,
    }

    private class Geometry
    {
        public ushort[] Index { get; private set; }
        public float[] Vertex { get; private set; }
        public float[] Color { get; private set; }
        public float Zoom { get; private set; }

        public static Geometry Create(GeometryType type)
        {
            return type switch {
                GeometryType.TRIANGLE => new Geometry {
                    Zoom = -2f,
                    Vertex = new float[]
                    {
                        -0.5f, -0.5f, 0.0f,
                        -0.5f,  0.5f, 0.0f,
                         0.5f,  0.0f, 0.0f,
                    },
                    Index = new ushort[]
                    {
                        0, 1, 2,
                    },
                    Color = new float[]
                    {
                        1,0,0,
                        0,1,0,
                        0,0,1,
                    },
                },
                GeometryType.CUBE => new Geometry {
                    Zoom = -4f,
                    Vertex = new float[]
                    {
                        -1, -1, -1,  1, -1, -1,  1,  1, -1, -1,  1, -1,
                        -1, -1,  1,  1, -1,  1,  1,  1,  1, -1,  1,  1,
                        -1, -1, -1, -1 , 1, -1, -1,  1,  1, -1, -1,  1,
                         1, -1, -1,  1,  1, -1,  1,  1,  1,  1, -1,  1,
                        -1, -1, -1, -1, -1,  1,  1, -1,  1,  1, -1, -1,
                        -1,  1, -1, -1,  1,  1,  1,  1,  1,  1,  1, -1,
                    },
                    Index = new ushort[]
                    {
                         0,  1,  2,
                         0,  2,  3,
                         4,  5,  6,
                         4,  6,  7,
                         8,  9, 10,
                         8, 10, 11,
                        12, 13, 14,
                        12, 14, 15,
                        16, 17, 18,
                        16, 18, 19,
                        20, 21, 22,
                        20, 22, 23,
                    },
                    Color = new float[]
                    {
                        1,0,1, 1,0,1, 1,0,1, 1,0,1,
                        0,1,1, 0,1,1, 0,1,1, 0,1,1,
                        0,0,1, 0,0,1, 0,0,1, 0,0,1,
                        1,0,0, 1,0,0, 1,0,0, 1,0,0,
                        1,1,0, 1,1,0, 1,1,0, 1,1,0,
                        0,1,0, 0,1,0, 0,1,0, 0,1,0,
                    },
                },
                _ => throw new InvalidOperationException("Invalid geometry type"),
            };
        }
    }
}
